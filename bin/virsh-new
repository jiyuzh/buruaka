#!/usr/bin/env bash

set -euo pipefail

function do_confirm {
	while :; do
		read -p "$2 (y/n) " yn
		case $yn in
		[Yy]* )
			eval "$1=1"
			break
			;;
		[Nn]* )
			eval "$1=0"
			break
			;;
		* )
			echo "Please answer yes or no."
			;;
		esac
	done
}

function read_num {
	while :; do
		read -p "$2: " ans

		if echo "$ans" | regex '^\d+$' &>/dev/null; then
			eval "$1=$ans"
			break
		fi

		echo "Please answer an integer."
	done
}

function read_ident {
	while :; do
		read -p "$2: " ans

		if echo "$ans" | regex '^[a-zA-Z]\w*$' &>/dev/null; then
			eval "$1=$ans"
			break
		fi

		echo "Please answer an identifier."
	done
}

function read_str {
	while :; do
		read -p "$2: " ans

		if [ -z "$ans" ]; then
			echo "Please answer a string."
		else
			eval "$1=$ans"
			break
		fi
	done
}

function read_path {
	exist="$3"

	while :; do
		read -p "$2: " ans

		if [ -z "$ans" ]; then
			echo "Please answer an integer."
		else
			if [ "$exist" -eq "1" ]; then
				file=$(realpath -e "$ans")

				[ "$?" -eq "0" ] && [ ! -z "$file" ] && [ -e "$file" ]
			else
				dir=$(dirname "$(realpath "$ans")")
				mkdir -pv "$dir"
				file=$(realpath "$ans")

				if [ "$exist" -eq "0" ]; then
					[ "$?" -eq "0" ] && [ ! -z "$file" ] && [ ! -e "$file" ]
				else
					[ "$?" -eq "0" ] && [ ! -z "$file" ]
				fi
			fi

			if [ "$?" -ne "0" ]; then
				echo "Invalid path $ans"
			else
				eval "$1=$file"
				break
			fi
		fi
	done
}

read_ident name "Name of the new VM"
read_num cpu "CPU counts"
read_num mem "Memory size (MB)"
read_num disk "Disk size (GB)"

echo

read_str os "OS variant (Run 'osinfo-query os' to see a list)"
read_path iso "Install media (.iso) path" 1
read_path path "VM disk image (.qcow2) path" 0

echo

echo "Creating VM:"
echo "- Name: $name"
echo "- CPU: $cpu vCPU"
echo "- Memory: $mem MB"
echo "- Disk: $disk GB"
echo
echo "- Installing: $os"
echo "- Install from: $iso"
echo "- Install to: $path"

echo

# Create a directory to mount ISO
rootdir=$(sudo mktemp -d "/tmp/live-iso.XXXXXXXX")
if [ "$?" -ne 0 ]; then
	echo "Unable to allocate temp directory"
	exit 1
fi

# Mount ISO
sudo mount -o loop "$iso" "$rootdir"
if [ "$?" -ne 0 ]; then
	echo "Unable to mount $iso"
	exit 1
fi

# Ubuntu virt-manager has bug
git clone --depth=1 https://github.com/virt-manager/virt-manager virt-manager-virsh-new
cd virt-manager-virsh-new
if [ ! -f "./virt-install" ]; then
	echo "Failed to fetch the latest version of virt-manager from https://github.com/virt-manager/virt-manager"
	exit 1
fi

# The command train
cmdline="sudo ./virt-install --virt-type kvm --hvm --name \"$name\" --vcpus \"$cpu\" --cpu host-passthrough --memory \"$mem\" --os-variant \"$os\" --disk path=\"$path\",size=\"$disk\",bus=virtio,format=qcow2 --cdrom \"$iso\" --network default,model=virtio --graphics none --console pty,target_type=serial --boot kernel="$rootdir/casper/vmlinuz",initrd="$rootdir/casper/initrd",kernel_args=\"console=ttyS0\" --qemu-commandline=\"-s\""

echo

echo "The following command will be run:"
echo "$cmdline"

echo

echo "The Escape sequence is: Ctrl + ]"
echo "Note:"
echo "    1. After installation, you must remove <kernel>, <initrd> and <cmdline> line from the <os> section of Virsh XML config"
echo "    2. Otherwise, you will receive a message: 'can't open /dev/sr0: No medium found'"
echo "    3. You may add VNC display, or enable serial mode of GRUB after installation"

echo

do_confirm _discard "Proceed to installation?"

echo

eval "$cmdline"

sudo virsh destroy "$name"
sudo virsh edit "$name"

# Cleanup
cd ..
sudo umount "$rootdir"
sudo rm -rf "$rootdir"
sudo rm -rf "./virt-manager-virsh-new"
