#!/usr/bin/env perl

use warnings;
use strict;

use File::Basename;
use File::Spec;
use Data::Dumper;
use Getopt::Long;
use Pod::Usage;
use Term::ReadLine;

my $SCRIPT_DIR = dirname(__FILE__);

sub help
{
	my ($exitval) = @_;

	my $prog = basename($0);

	my $help = <<"EOF";
grub-next v1.1.0
Jiyuan Zhang <jiyuanz3\@illinois.edu>

grub-next is a wrapper around grub-reboot which let you filter desired boot
entries and set is as the target of next boot.

USAGE:
    $prog [OPTIONS] PATTERN [--list]
    $prog [OPTIONS] --current
    $prog [OPTIONS] --list

ARGS:
    <PATTERN>
        A regular expression used for searching. To match a pattern beginning
        with a dash, use the special '--' delimiter to indicate that no more
        flags will be provided.

OPTIONS:
    -c, --current
        Display the active boot entry and quit.

    -d, --dryrun
        Run the program without changing system setting.

    -g, --grub, --grubpath <PATH>
        Specify the grub environment folder to work with.

        The default value is: /boot/grub/

    -h, -?, --help
        Show this help.

    -i, --index, --offset <INDEX>
        When multiple bootable entries matches the pattern, the entry listed at
        the specified index will be selected.

        The default value is: 0

    -k, --kexec
        Setup kexec instead of GRUB. This also affects --reboot.

    -l, --list
        List all bootable entries.

    -p, --persistent
        The boot entry choice shall be preserved across multiple reboot.

        This option cannot be used with --kexec.

    -r, --reboot
        Reboot the machine automatically. An interactive confirmation is required.

    -s, --show
        Display the content of the selected boot entry and quit without changing
        system settings.

    -v, --verbose <LEVEL>
        Change the verbosity of the program output.

        The default value is: 0

    -y, --yes
        Answer yes or use default values for interactive prompts.

OUTPUT:
    Status messages for human consumption.

EXIT STATUS:
    0   The requested action was successfully performed.

    1   Invalid command-line usage.

    2   Given boot entry is not found or invalid.

    3   System setting change failed.

    4   User cancelled planned operation.

EOF
	print($help);

	if ($exitval =~ /^\d+$/) {
		exit $exitval;
	}

	exit 0;
}

sub parseGrubCfg
{
	my ($verbose, $path) = @_;

	my @fqnstack;
	my @namstack;
	my @posstack;
	my @result;
	my $cursor = "ERR_SUBMENU_NULL";
	my $submenu = "! Unknown submenu entry !";
	my $offset = -1;

	$path = $path . "/grub.cfg";

	print("Parsing GRUB config file: $path") if ($verbose >= 1);

	open my $grub_fh, $path or die "Could not open $path: $!\n";
	my $grub_text = do { local $/; <$grub_fh> };
	close($grub_fh);

	my $prev = 0;

	while ($grub_text =~ /^\h*(?P<class>menuentry|submenu)\h+'(?P<name>[^']+)'\h+[^']+\h+'(?P<id>[^']+)'\h/gm) {
		my $class = $+{class};
		my $name = $+{name};
		my $id = $+{id};

		# This is to support submenu nesting and optionally detect syntax errors
		my $prefix = substr($grub_text, $prev, $-[0] - $prev);
		$prev = $+[0];

		foreach my $char (split('', $prefix)) {
			if ($char eq '{') {
				push(@fqnstack, $cursor);
				$cursor = "ERR_SUBMENU_NULL";
				push(@namstack, $submenu);
				$submenu = "! Unknown submenu entry !";
				push(@posstack, $offset);
				$offset = -1;
			}
			if ($char eq '}') {
				$cursor = pop(@fqnstack);
				$submenu = pop(@namstack);
				$offset = pop(@posstack);
			}
		}

		# For each encountered entry, we increate the offset
		$offset++;

		# Submenu, setup stack frame and parse next
		if ($class eq "submenu") {
			$cursor = $id;
			$submenu = $name;
			next;
		}

		# Menuentry, dump stack as a result
		if ($class eq "menuentry") {
			my @fqns = @fqnstack;
			push(@fqns, $id);
			my $fqn = join('>', @fqns);

			my @nams = @namstack;
			push(@nams, $name);
			my $nam = join(' -> ', @nams);

			my @poss = @posstack;
			push(@poss, $offset);
			my $pos = join('>', @poss);

			# We also keep the start position so we can extract content
			my %entry = (
				"name" => $nam,
				"fqn" => $fqn,
				"pos" => $pos,
				"text_start" => $-[0],
			);
			push(@result, \%entry);
		}
	}

	print(" -> Loaded " . scalar(@result) . " bootable entries\n") if ($verbose >= 1);

	return @result;
}

sub strGrubEntry
{
	my ($entry, $indented) = @_;

	my $format = "%s %s";

	if ($indented) {
		$format = "%-10s %s";
	}

	return sprintf($format, "[$entry->{pos}]", $entry->{name});
}

sub listGrubEntry
{
	my ($verbose, @entries) = @_;
	my $idx = 0;

	print("\n") if ($verbose >= 1);

	foreach my $entry (@entries) {
		printf("%3d. %s\n", $idx, strGrubEntry($entry, 1));
		$idx++;
	}
}

sub filterGrubEntry
{
	my ($verbose, $pattern, @entries) = @_;

	print("Filtering entries with PCRE pattern: /$pattern/m") if ($verbose >= 1);

	my @result;

	foreach my $entry (@entries) {
		# Only filter on human_name and id_expr as they are stable
		if ($entry->{name} =~ /$pattern/m || $entry->{fqn} =~ /$pattern/m) {
			push(@result, $entry);
		}
	}

	print(" -> Gathered " . scalar(@result) . " bootable entries.\n") if ($verbose >= 1);

	listGrubEntry(@result) if ($verbose >= 2);

	return @result;
}

sub extractGrubBoot
{
	my ($verbose, $path, $entry) = @_;

	my $balance = 0;

	$path = $path . "/grub.cfg";

	open my $grub_fh, $path or die "Could not open $path: $!\n";
	my $grub_text = do { local $/; <$grub_fh> };
	close($grub_fh);

	my $text = "";

	# Take every thing before first '{' (entry header) and the paired '}' (entry body)
	foreach my $char (split('', substr($grub_text, $entry->{text_start}))) {
		$text .= $char;

		if ($char eq '{') {
			$balance++;
		}
		if ($char eq '}') {
			$balance--;
			if ($balance <= 0) {
				last;
			}
		}
	}

	return $text;
}

sub showGrubBoot
{
	my ($verbose, $path, $entry) = @_;

	print(extractGrubBoot($verbose, $path, $entry));
}

sub unescapeGrubString
{
	my ($str) = @_;

	my $out = `echo $str`;
	$out =~ s/\n//gm;

	return $out;
}

sub parseGrubBoot
{
	my ($verbose, $path, $entry) = @_;

	my $text = extractGrubBoot($verbose, $path, $entry);

	my $initrd = "";
	my $linux = "";
	my $param = "";
	my $uuid = "";

	print("Extracting boot parameter from GRUB entry " . strGrubEntry($entry, 0) . "\n") if ($verbose >= 1);
	print("\n--- Begin GRUB menu content---\n$text\n--- End GRUB menu content---\n\n") if ($verbose >= 2);

	# The boot partition search line
	if ($text =~ /^\h*search(?=.*--fs-uuid)(?=.*--set=root).*\h([0-9a-fA-F\-]{36})(?:\h|$)/m) {
		$uuid = $1;
	}
	else {
		print("Unable to extract disk partition UUID from GRUB entry\n");
		return (0, $uuid, $linux, $initrd, $param);
	}

	# The linux kernel line
	if ($text =~ /^\h*linux\h+((?:'[^']+'|"(?:[^"]|\\")+"|[^\s]+)+)(?:\h+(.*))?$/m) {
		$linux = unescapeGrubString($1);
		$param = unescapeGrubString($2);
	}
	else {
		print("Unable to extract linux kernel cmdline from GRUB entry\n");
		return (0, $uuid, $linux, $initrd, $param);
	}

	# The initrd image line
	if ($text =~ /^\h*initrd\h+((?:'[^']+'|"(?:[^"]|\\")+"|[^\s]+)+)\h*$/m) {
		$initrd = unescapeGrubString($1);
	}
	else {
		print("Unable to extract initrd path from GRUB entry\n");
		return (0, $uuid, $linux, $initrd, $param);
	}

	return (1, $uuid, $linux, $initrd, $param);
}

sub selectGrubBoot
{
	my ($verbose, $path, $persistent, $dryrun, $entry) = @_;

	my $fqn = $entry->{fqn};
	my $output = "";
	my $ret = 0;

	# Dryrun, we may use `true` to call the real routine but it will trigger post-validation error
	if ($dryrun != 0) {
		print("\n") if ($verbose >= 1);
		print("Dry run boot entry is: " . strGrubEntry($entry, 0) . "\n");

		my $real = probeGrubEntry($verbose, $path);
		print("Current active boot entry is: $real\n");
		return 0;
	}

	if ($persistent == 0) {
		$output = `grub-reboot '$fqn' 2>&1`;
	}
	else {
		# NOTE: grub-set-default will erase grub-reboot config
		$output = `grub-set-default '$fqn' 2>&1`;
	}

	$ret = $?;

	my $real = probeGrubEntry($verbose, $path);

	if ($ret == 0 && $output eq "") {
		print("\n") if ($verbose >= 1);

		if ($real eq $fqn) {
			print("Set boot entry to: " . strGrubEntry($entry, 0) . "\n");
			print("Current active boot entry is: $real\n");
			return 0;
		}
		else {
			print("Unable to set boot entry to: " . strGrubEntry($entry, 0) . "\n");
			print("Current active boot entry is: $real\n");
			return 3;
		}
	}
	else {
		print("\n") if ($verbose >= 1);
		print($output);
		print("\n");
		print("GRUB failed with return code $ret\n");
		print("Failed to set boot entry to: " . strGrubEntry($entry, 0) . "\n");
		print("Current active boot entry is: $real\n");
		return 3;
	}
}

sub resolveDiskUuid
{
	my ($verbose, $uuid) = @_;

	my $mounts = `lsblk -o UUID,MOUNTPOINT`;

	print("Extracting mounting point for disk UUID $uuid\n") if ($verbose >= 1);
	print("\n--- Begin lsblk output---\n$mounts\n--- End lsblk output---\n\n") if ($verbose >= 2);

	if ($mounts =~/^$uuid\h+(.*)$/m) {
		return (1, $1);
	}
	
	print("Unable to find mounting point of disk UUID $uuid\n");
	return (0, "");
}

sub editKexecCmdline
{
	my ($cmdline) = @_;

	my $term = Term::ReadLine->new('grub-next-cmdline', \*STDIN, \*STDOUT);  
	return $term->readline("New cmdline: ", $cmdline) ; 
}

sub selectKexecBoot
{
	my ($verbose, $grubdir, $dryrun, $scripted, $entry) = @_;

	# Collect boot parameters
	my ($parsed, $uuid, $linux, $initrd, $param) = parseGrubBoot($verbose, $grubdir, $entry);
	if (!$parsed) {
		return 2;
	}

	# Because GRUB use path relative to partition root, we also need to parse the mount
	my ($mounted, $root) = resolveDiskUuid($verbose, $uuid);
	if (!$mounted) {
		return 2;
	}

	# Quick and dirty check
	$linux = File::Spec->canonpath("$root/$linux");
	$initrd = File::Spec->canonpath("$root/$initrd");

	if (! -f $linux || ! -f $initrd) {
		print("Failed to locate required files:\n    linux = $linux\n    initrd = $initrd\n");
		return 2;
	}

	# Kexec is not reliable enough to proceed without confirmation
	print("Current boot parameters:\n    linux = $linux\n    initrd = $initrd\n    cmdline = $param\n");

	if ($scripted == 0) {
		print("\nProceed to kexec or edit the cmdline? (y/n/e): ");

		while (<STDIN>) {
			if (/^y(es)?$/gmi) {
				last;
			}
			elsif (/^n(o)?$/gmi) {
				return 4;
			}
			elsif (/^e(dit)?$/gmi) {
				$param = editKexecCmdline($param);
				print("\nCurrent boot parameters:\n    linux = $linux\n    initrd = $initrd\n    cmdline = $param\n");
				print("\nProceed to kexec or edit the cmdline? (y/n/e): ");
			}
			else {
				print("Please answer yes or no or edit (y/n/e): ");
			}
		}
	}

	# Setup command line
	$linux =~ s/'/'"'"'/g;
	$initrd =~ s/'/'"'"'/g;
	$param =~ s/'/'"'"'/g;

	if ($dryrun != 0) {
		print("\n") if ($verbose >= 1);
		print("Dry run kexec command is: kexec -l '$linux' --initrd='$initrd' --command-line='$param'\n");
		return 0;
	}

	my $output = `kexec -l '$linux' --initrd='$initrd' --command-line='$param'`;
	my $ret = $?;

	if ($ret == 0 && $output eq "") {
		print("\n") if ($verbose >= 1);

		print("Kexec success\n");
	}
	else {
		print("\n") if ($verbose >= 1);
		print($output);
		print("\n");
		print("Kexec failed with return value $ret\n");
		return 3;
	}

	return 0;
}

sub probeGrubEntry
{
	my ($verbose, $path) = @_;

	$path = $path . "/grubenv";

	print("Checking GRUB environment file: $path") if ($verbose >= 1);

	open my $grub_fh, $path or die "Could not open $path: $!\n";
	my $grub_text = do { local $/; <$grub_fh> };
	close($grub_fh);

	# This fallback order is from GRUB source code
	if ($grub_text =~ /^\h*next_entry\h*=\h*(.+)\h*$/m) {
		return $1;
	}

	if ($grub_text =~ /^\h*saved_entry\h*=\h*(.+)\h*$/m) {
		return $1;
	}

	return "! Unknown boot entry !";
}

sub doReboot
{
	my ($verbose, $dryrun, $scripted, $kexec) = @_;

	if ($scripted == 0) {
		print("\nProceed to reboot? (y/n): ");

		while (<STDIN>) {
			if (/^y(es)?$/gmi) {
				last;
			}
			elsif (/^n(o)?$/gmi) {
				return 4;
			}
			else {
				print("Please answer yes or no (y/n): ");
			}
		}
	}

	if ($dryrun != 0) {
		print("\n") if ($verbose >= 1);
		print("Dry run machine will reboot now\n");
		return 0;
	}

	my $output = "";
	
	if ($kexec) {
		$output = `systemctl kexec`;
	}
	else {
		$output = `reboot`;
	}

	my $ret = $?;

	if ($ret == 0 && $output eq "") {
		return 0;
	}
	else {
		print("\n") if ($verbose >= 1);
		print($output);
		print("\n");
		print("Reboot failed with return code $ret\n");

		return 3;
	}
}

GetOptions(
	'help|?' => \&help,

	'current!' => \(my $current = 0),
	'dryrun!' => \(my $dryrun = 0),
	'grubpath=s' => \(my $grubdir = "/boot/grub/"),
	'index|offset=i' => \(my $index = 0),
	'kexec!' => \(my $kexec = 0),
	'list!' => \(my $listmode = 0),
	'persistent!' => \(my $persistent = 0),
	'reboot!' => \(my $reboot = 0),
	'show!' => \(my $detail = 0),
	'verbose=i' => \(my $verbose = 0),
	'yes!' => \(my $scripted = 0),
) or help(1);

# Current mode, just show the current entry and quit
if ($current == 1) {
	my $real = probeGrubEntry($verbose, $grubdir);
	print("Current active boot entry is: $real\n");
	exit 0;
}

# The only positional we accept is a pattern
if (scalar(@ARGV) > 1) {
	help(1);
}

# Positional-less listing mode is allowed (list all parsed entries)
if (!$listmode && scalar(@ARGV) < 1) {
	help(1);
}

my @all = parseGrubCfg($verbose, $grubdir);

# List all parsed entries if asked
if ($listmode != 0 && scalar(@ARGV) < 1) {
	listGrubEntry($verbose, @all);
	exit 0;
}

my $pattern = $ARGV[0];
my @result = filterGrubEntry($verbose, $pattern, @all);

# List matched entries if asked
if ($listmode != 0) {
	listGrubEntry($verbose, @result);
	exit 0;
}

# Pick the choosen one
my $totalent = scalar(@result);
if ($index >= $totalent) {
	if ($totalent == 0) {
		print("No available entry found\n");
	}
	else {
		print("Invalid index value $index for $totalent entries\n");
	}
	exit 2;
}

print("Selected $index-th boot entry\n") if ($verbose >= 1);

my $ret = 0;

# See if the user want to see the entry content or apply it
if ($detail) {
	showGrubBoot($verbose, $grubdir, $result[$index]);
}
elsif ($kexec) {
	if ($persistent) {
		print("Cannot persist kexec boot result\n");
		exit 1;
	}

	$ret = selectKexecBoot($verbose, $grubdir, $dryrun, $scripted, $result[$index]);
}
else {
	$ret = selectGrubBoot($verbose, $grubdir, $persistent, $dryrun, $result[$index]);
}

# If reboot is requested, do it
# But only do it either with user supervision or perfect execution
if ($reboot && $ret == 0) {
	$ret = doReboot($verbose, $dryrun, $scripted, $kexec);
}

exit $ret;
