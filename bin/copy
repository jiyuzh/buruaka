#!/usr/bin/env perl

use warnings;
use strict;

use POSIX;
use File::Basename;
use Data::Dumper;
use Getopt::Long;
use MIME::Base64;
use Term::ReadLine;

my $SCRIPT_DIR = dirname(__FILE__);
my $MAX_OSC52_LENGTH = 100000;
my $MAX_SCREEN_LENGTH = 768;

sub help
{
	my ($exitval) = @_;

	my $prog = basename($0);

	my $help = <<"EOF";
ssh-copy v1.0.0
Jiyuan Zhang <jiyuanz3\@illinois.edu>

ssh-copy is a OSC 52 clipboard writer which supports auto text fragmentation.

Note that this program will buffer ALL outputs before sending. Do NOT use it for
long running processes or gigantic blob of text.

USAGE:
    $prog [OPTIONS] FILE
    COMMAND | $prog [OPTIONS]

ARGS:
    <FILE>
        A file to read copying data from.

    <COMMAND>
        A command to pipe copying data from.

OPTIONS:
    -h, -?, --help
        Show this help.

OUTPUT:
    Status messages for human consumption.

EXIT STATUS:
    0   The requested action was successfully performed.

    1   Invalid command-line usage.

EOF
	print($help);

	if ($exitval =~ /^\d+$/) {
		exit $exitval;
	}

	exit 0;
}

sub computeLimit
{
	my $osc52Overhead = 8;
	my $tmuxOverhead = 10;
	my $screenOverhead = ceil($MAX_OSC52_LENGTH / $MAX_SCREEN_LENGTH) * 4;
	my $safeguard = 16;

	# Just plan for the worst
	my $fixedOverhead = $osc52Overhead + $tmuxOverhead + $screenOverhead + $safeguard;
	my $allowance = $MAX_OSC52_LENGTH - $fixedOverhead;

	return floor($allowance / 4 * 3);
}

sub readAllText
{
	my ($path) = @_;

	open my $fd, $path or die "Could not open $path: $!\n";
	my $text = do { local $/; <$fd> };
	close($fd);

	return $text;
}

sub copyTmux
{
	my ($seq) = @_;

	# TMUX has special passthrough sequence
	print("\x1bPtmux;\x1b$seq\x1b\\");
}

sub copyScreen
{
	my ($seq) = @_;

	# Screen limits the length of string sequences, so we have to break it up
	# We go 4 bytes under the limit because we're going to insert escapers
	my $limit = $MAX_SCREEN_LENGTH - 4;
	$seq =~ s/.{$limit}/$&\n/gm;
	$seq =~ s/^/\x1bP/gm;
	$seq =~ s/$/\x1b\\/gm;
	$seq =~ s/\n//gm;

	print($seq);
}

sub copyOther
{
	my ($seq) = @_;

	print($seq);
}

sub copyCore
{
	my ($txt) = @_;

	# Generate OSC 52 sequence
	my $enc = encode_base64($txt, "");
	my $seq = "\x1b]52;c;$enc\a";

	# Detect terminal to choose the right one
	if ($ENV{TERM} =~ /\btmux\b/) {
		copyTmux($seq);
	}
	elsif ($ENV{TERM} =~ /\bscreen\b/) {
		# Some TMUX release may fake itself as screen, so one more check
		if ($ENV{TMUX} =~ /./) {
			copyTmux($seq);
		}
		else {
			copyScreen($seq);
		}
	}
	else {
		copyOther($seq);
	}
}

sub copyRoselia
{
	my ($txt) = @_;

	open(my $pipe, '|-', "$SCRIPT_DIR/extra/roselia-copy");
	print $pipe $txt;
	close($pipe);

	return 0 if ($? != 0);
	return 1;
}

sub copyAll
{
	my ($txt, $limit) = @_;

	my $len = length($txt);
	if ($len < $limit) {
		copyCore($txt);

		print("Text sent to clipboard.\n");

		return 0;
	}

	if (copyRoselia($txt)) {
		print("Text sent to clipboard.\n");

		return 0;
	}

	# In case the STDIN is used to pipe text, we need another terminal for interactive prompts
	my $term = Term::ReadLine->new('term');
	my @_IO = $term->findConsole();
	my $_IN = $_IO[0];
	open my $TTY, '<', $_IN or die "Could not open terminal $_IN: $!\n";

	# Text fragmentation
	my $pos = 0;
	my $part = 1;
	my $parts = ceil($len / $limit);
	while ($pos < $len) {
		my $frag = substr($txt, $pos, $limit);

		copyCore($frag);

		if ($part < $parts) {
			print("Part $part/$parts sent to clipboard. Hit Enter to send next part.\n");
			<$TTY>;
		}
		else {
			print("Part $part/$parts sent to clipboard. All parts sent.\n");
			last;
		}

		$pos += $limit;
		$part += 1;
	}

	close $TTY;
	return 0;
}

my $str = "";

GetOptions(
	'help|?' => \&help,
) or help(1);

# File mode
if (scalar(@ARGV) == 1) {
	$str = readAllText($ARGV[0]);
}
# Pipe mode, STDIN is detached from terminal
elsif (! -t STDIN) {
	$str = do { local $/; <STDIN> };
	close STDIN;
}
# Terminal mode w/o file input, show help
else {
	help(1);
}

my $limit = computeLimit();
copyAll($str, $limit);

exit 0;
